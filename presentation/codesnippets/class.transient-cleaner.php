<?php
namespace OM\TM;

class TransientCleaner {
  public $transientList = [];

  public function __construct() {
    add_action("save_post", [$this, "maybeCleanTransients"], 10, 3);

    $this->transientList = $this->parseTransientListItems();
  }

  /**
   * Function used with array_filter. Resulting list of transients will be deleted.
   * TODO: Finer control. If a post is published with category 3, don't delete transients
   * from other categories.
   */
  public function transientMatchesClearCondition($listItem = []) {
    $parsedKey = $listItem["parsedKey"];
    $parts = $parsedKey["parts"];
    $routeNames = [ // If transient $routeName matches, remove transient.
      "frontpage",
      "stickies",
      "sidebar",
      "wp/v2/categories", // cacheproxy
      "wp/v2/tags", // cacheproxy
      "wp/v2/taxonomies", // cacheproxy
      "wp/v2/types", // cacheproxy
    ];


    if ($parsedKey["transientPrefix"] === "omf" && $parts[1] === "cacheproxy") {
      // Transient generated by \OM\TM\REST\Routes\Cacheproxy
      // $parts[0] & $parts[1] are useless.
      $routeName = $parts[2];

      return in_array($routeName, $routeNames);
    } else if ($parsedKey["transientPrefix"] === "omf" && $parts[0] === "om/v1") {
      // Transient generated by \OM\TM\RestRoute

      $routeName = $parts[1];
      // $routeParams = $parts[2];

      return in_array($routeName, $routeNames);
    }

    return false;
  }

  public function parseTransientKey(string $key) {
    $keyParts = explode('_', $key);
    $transientPrefix = $keyParts[0];
    $userAccessLevel = $keyParts[1];

    $restOfKey = array_slice($keyParts, 2);

    return [
      "transientPrefix" => $transientPrefix,
      "userAccessLevel" => $userAccessLevel,
      "parts" => $restOfKey,
    ];
  }

  public function parseTransientListItems() {
    $tlist = Transientify::getTransientList();
    $list = [];

    foreach ($tlist as $key => $item) {
      $list[] = array_merge($item, [
        "key" => $key,
        "parsedKey" => $this->parseTransientKey($key),
      ]);
    }

    return $list;
  }

  public function maybeCleanTransients($post_id, $post, $update = false) {
    /* if ($post->post_status !== 'publish') {
      // can't check for post to be published, turning the post back to draft wouldn't invalidate
      return false;
    } */

    // TODO: Use terms for finer control
    // $taxonomies = get_post_taxonomies($post);
    // $terms = [];

    // foreach ($taxonomies as $tax) {
    //   $terms = array_merge($terms, wp_get_post_terms($post_id, $tax));
    // }

    $removeList = array_filter($this->transientList, [$this, "transientMatchesClearCondition"]);
    $transientify = new \OM\TM\Transientify('_'); // Key is irrelevant, instance used for removing

    foreach ($removeList as $transient) {
      $key = $transient["key"];
      $transientify->clear($key);
    }
  }
}









